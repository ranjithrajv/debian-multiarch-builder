name: 'Debian Multi-Architecture Package Builder'
description: 'Build Debian packages for multiple architectures from upstream releases'
author: 'ranjithrajv'

branding:
  icon: 'package'
  color: 'red'

inputs:
  config-file:
    description: 'Path to the multiarch configuration YAML file'
    required: true
  version:
    description: 'Version of the software to build'
    required: true
  build-version:
    description: 'Debian build version number'
    required: true
  architecture:
    description: 'Architecture to build (amd64, arm64, armel, armhf, ppc64el, s390x, riscv64, or "all")'
    required: false
    default: 'all'
  max-parallel:
    description: 'Maximum number of parallel builds (default: 2, recommended: 2-4 for GitHub runners)'
    required: false
    default: '2'
  lintian-check:
    description: 'Enable Lintian check for Debian packages'
    required: false
    default: 'false'
  telemetry-enabled:
    description: 'Enable enhanced build telemetry and metrics collection'
    required: false
    default: 'true'
  save-baseline:
    description: 'Save current build metrics as performance baseline for regression detection'
    required: false
    default: 'false'
  
outputs:
  packages:
    description: 'List of generated .deb package files'
    value: ${{ steps.build.outputs.packages }}

runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget tar gzip jq curl lintian

        # Install mikefarah/yq (Go-based, not Python yq from apt)
        YQ_VERSION="v4.48.1"
        sudo wget -qO /usr/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
        sudo chmod +x /usr/bin/yq

    - name: Validate configuration
      shell: bash
      run: |
        if [ ! -f "${{ inputs.config-file }}" ]; then
          echo "Error: Configuration file not found: ${{ inputs.config-file }}"
          exit 1
        fi
        echo "Configuration file found: ${{ inputs.config-file }}"

    - name: Validate version availability
      shell: bash
      run: |
        echo "Checking if version ${{ inputs.version }} exists..."

        # Extract GitHub repo from config file
        GITHUB_REPO=$(yq eval '.github_repo' "${{ inputs.config-file }}" 2>/dev/null || echo "")

        if [ -z "$GITHUB_REPO" ]; then
          echo "⚠️  Warning: Could not determine GitHub repo from config, skipping version validation"
        else
          echo "Validating version ${{ inputs.version }} for $GITHUB_REPO..."

          # Check if version exists using GitHub API
          RELEASE_URL="https://api.github.com/repos/${GITHUB_REPO}/releases/tags/${{ inputs.version }}"

          if curl -s -f -o /dev/null -w "%{http_code}" "$RELEASE_URL" | grep -q "^200$"; then
            echo "✅ Version ${{ inputs.version }} exists and is accessible"
          else
            echo "❌ Version ${{ inputs.version }} does not exist or is not accessible!"
            echo ""
            echo "Latest available versions for $GITHUB_REPO:"

            # Get latest 3 versions for suggestion
            LATEST_VERSIONS=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases?per_page=3" | jq -r '.[].tag_name' 2>/dev/null || echo "Could not fetch versions")

            if [ -n "$LATEST_VERSIONS" ] && [ "$LATEST_VERSIONS" != "Could not fetch versions" ]; then
              echo "$LATEST_VERSIONS" | while read -r version; do
                echo "  - $version"
              done
            else
              echo "  Check https://github.com/${GITHUB_REPO}/releases for available versions"
            fi

            echo ""
            echo "💡 Please use a valid version and retry the build."
            exit 1
          fi
        fi

    - name: Build packages
      id: build
      shell: bash
      env:
        CONFIG_FILE: ${{ inputs.config-file }}
        VERSION: ${{ inputs.version }}
        BUILD_VERSION: ${{ inputs.build-version }}
        ARCHITECTURE: ${{ inputs.architecture }}
        MAX_PARALLEL: ${{ inputs.max-parallel }}
        LINTIAN_CHECK: ${{ inputs.lintian-check }}
        TELEMETRY_ENABLED: ${{ inputs.telemetry-enabled }}
        SAVE_BASELINE: ${{ inputs.save-baseline }}
        ACTION_PATH: ${{ github.action_path }}
      run: |
        echo "Starting multi-architecture build..."
        echo "Config: $CONFIG_FILE"
        echo "Version: $VERSION"
        echo "Build Version: $BUILD_VERSION"
        echo "Architecture: $ARCHITECTURE"

        # Copy build infrastructure from action to working directory
        cp -r "$ACTION_PATH/src" ./src
        cp -r "$ACTION_PATH/templates" ./templates
        cp "$ACTION_PATH/build.sh" ./build.sh
        cp "$ACTION_PATH/Dockerfile" ./src/Dockerfile
        chmod +x ./build.sh ./src/main.sh ./src/lib/*.sh

        # Run the build
        ./build.sh "$CONFIG_FILE" "$VERSION" "$BUILD_VERSION" "$ARCHITECTURE"

        # Collect generated packages
        PACKAGES=$(ls *.deb 2>/dev/null | tr '\n' ' ' || echo "")
        echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
        echo "Generated packages: $PACKAGES"
